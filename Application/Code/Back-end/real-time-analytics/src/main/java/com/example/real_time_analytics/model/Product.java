package com.example.real_time_analytics.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import java.util.List;

/**
 * Represents a product in the e-commerce system.
 * This class stores detailed information about a product, such as its name, description, price, stock quantity, category, tags, and image URL.
 */
@Document(collection = "products") // Indicates that this class maps to the "products" collection in MongoDB
public class Product {
    @Id
    private String id; // Unique identifier for the product, autogenerated by MongoDB
    private String name; // Name of the product
    private String description; // Detailed description of the product
    private double price; // Price of the product
    private int stockQuantity; // Number of units available in stock
    private String category; // Category the product belongs to (e.g., Electronics, Apparel)
    private List<String> tags; // Tags associated with the product for search and filtering
    private String imageUrl; // URL of the product image

    // Getters and Setters

    /**
     * Retrieves the unique identifier of the product.
     *
     * @return The product ID.
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the product.
     *
     * @param id The product ID to set.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Retrieves the name of the product.
     *
     * @return The product name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the product.
     *
     * @param name The product name to set.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Retrieves the description of the product.
     *
     * @return The product description.
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the product.
     *
     * @param description The product description to set.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Retrieves the price of the product.
     *
     * @return The product price.
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price of the product.
     *
     * @param price The product price to set.
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Retrieves the stock quantity of the product.
     *
     * @return The stock quantity.
     */
    public int getStockQuantity() {
        return stockQuantity;
    }

    /**
     * Sets the stock quantity of the product.
     *
     * @param stockQuantity The stock quantity to set.
     */
    public void setStockQuantity(int stockQuantity) {
        this.stockQuantity = stockQuantity;
    }

    /**
     * Retrieves the category of the product.
     *
     * @return The product category.
     */
    public String getCategory() {
        return category;
    }

    /**
     * Sets the category of the product.
     *
     * @param category The product category to set.
     */
    public void setCategory(String category) {
        this.category = category;
    }

    /**
     * Retrieves the tags associated with the product.
     *
     * @return The list of tags.
     */
    public List<String> getTags() {
        return tags;
    }

    /**
     * Sets the tags associated with the product.
     *
     * @param tags The list of tags to set.
     */
    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    /**
     * Retrieves the URL of the product image.
     *
     * @return The image URL.
     */
    public String getImageUrl() {
        return imageUrl;
    }

    /**
     * Sets the URL of the product image.
     *
     * @param imageUrl The image URL to set.
     */
    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }
}
